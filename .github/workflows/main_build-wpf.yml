name: Build WPF Application

on:
  push:
    branches: [ main ]

jobs:
  # A job that builds a .NET Framework WPF application using Telerik UI for WPF
  # It uses a Windows runner and builds for x86 and x64 runtime
  build_desktop:
    runs-on: windows-latest # WPF apps must be built on Windows runners
    #runs-on: [self-hosted, Windows, X64]
    env:
      Actions_Allow_Unsecure_Commands: true #This is only required for the AzureSignTool step
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.100
    
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    
    # We use the dotnet CLI (instead of nuget.exe) to restore the nuget packages before using msbuild
    - name: NuGet Restore
      run: dotnet restore src\Wpf\MyWpfApp\MyWpfApp.csproj --configfile src\NuGet.Config --runtime win-x86
      env:
        TELERIK_USERNAME: ${{ secrets.MyTelerikAccountUsername }}
        TELERIK_PASSWORD: ${{ secrets.MyTelerikAccountPassword }}

    # Use msbuild to compile the .NET Framework WPF project
    - name: Build the WPF application
      run: msbuild src\Wpf\MyWpfApp\MyWpfApp.csproj /t:Restore /p:Configuration=Release /p:RuntimeIdentifier=win-x86

    # Install Azure SignTool and sign the exe
    - name: Sign the app files
      run: |
        dotnet tool install AzureSignTool --global
        AzureSignTool.exe sign --azure-key-vault-url $env:AZURE_KEYVAULT_URL --azure-key-vault-client-id $env:AZURE_KEYVAULT_CLIENT_ID --azure-key-vault-client-secret $env:AZURE_CLIENT_SECRET --azure-key-vault-certificate $env:AZURE_KEYVAULT_CERTIFICATE_NAME src\Wpf\MyWpfApp\bin\Release\MyWpfApp.exe
